//-----------------------------------------------------
// mixin scss
// 包括常用的mixin，%及@function
// mixin，通过@include调用，样式通过拷贝的方式使用，尤其适用于传递参数
// %，通过@extend调用，样式通过组合申明的方式使用，适用于不传参数的代码片段
// @function，返回一个值，用于调用
// mixin & %
// 既定义了mixin也定义了%，根据需求使用@include或@extend调用
//-----------------------------------------------------
// css3
// @include css3(transform, scale3d(1, 0.5, 1))
//-----------------------------------------------------
@mixin css3($property, $value...) {
    @each $prefix in -webkit-,
    "" {
        #{$prefix}#{$property}: $value;
    }
}

// rem
// thanks:http://drublic.de/blog/rem-fallback-sass-less/;
// @include rem(width, 20) -> width: 280px; width: 20rem;
//-----------------------------------------------------
@mixin rem($property, $px) {
    #{$property}: $px * $font-size-base;
    #{$property}: #{$px}rem;
}

// @include rem-font-size(2)->font-size: 28px; font-size: 2rem;
//-----------------------------------------------------
@mixin rem-font-size($px) {
    font-size: $px * $font-size-base;
    font-size: #{$px}rem;
}

// bem
// elements get appended with "__" and the $name
// .block {@include bem-e(element){...}} -> .block__element {...}
//-----------------------------------------------------
@mixin bem-e($name) {
    @at-root #{&}__#{$name} {
        @content;
    }
}

// modifiers get appended with "--" and the $name
// .block {@include bem-m(modifier){...}} -> .block--modifier {...}
//-----------------------------------------------------
@mixin bem-m($name) {
    @at-root #{&}--#{$name} {
        @content;
    }
}

// mixin elements and modifiers
// .block {@include bem-e-m(element, modifier){...}} -> .block__element--modifier {...}
//-----------------------------------------------------
@mixin bem-e-m($e-name, $m-name) {
    @at-root #{&}__#{$e-name}--#{$m-name} {
        @content;
    }
}

// float
// @include float -> float: left;
//-----------------------------------------------------
@mixin float($float: left) {
    float: $float;
}

// clearfix
// @include clearfix();
//-----------------------------------------------------
@mixin clearfix {
    &::before,
    &::after {
        content: "";
        display: table;
    }
    &::after {
        clear: both;
    }
}

%clearfix {
    @include clearfix;
}

// hide
//-----------------------------------------------------
@mixin hide {
    display: none;
}

// show
//-----------------------------------------------------
@mixin show {
    display: block;
}

// arrow
//-----------------------------------------------------
@mixin arrow($direction, $size, $color) {
    width: 0;
    height: 0;
    border-width: $size;
    cursor: pointer;
    @extend %text-overflow;
    @if $direction==top {
        border-style: dashed dashed solid dashed;
        border-color: transparent transparent $color transparent;
        border-top: none;
    }
    @else if $direction==right {
        border-style: dashed dashed dashed solid;
        border-color: transparent transparent transparent $color;
        border-right: none;
    }
    @else if $direction==bottom {
        border-style: solid dashed dashed dashed;
        border-color: $color transparent transparent transparent;
        border-bottom: none;
    }
    @else if $direction==left {
        border-style: dashed solid dashed dashed;
        border-color: transparent $color transparent transparent;
        border-left: none;
    }
}

// border
//-----------------------------------------------------
@mixin border($direction: all, $color: $border-color-main) {
    position: relative;
    &::after {
        content: "";
        position: absolute;
        @if $direction==top {
            top: 0;
            left: 0;
            width: 100%;
            height: 1px;
            background-color: $color;
            @include css3(transform-origin, 0 0);
            @include css3(transform, scale3d(1, .5, 1));
        }
        @else if $direction==right {
            top: 0;
            right: 0;
            width: 1px;
            height: 100%;
            background-color: $color;
            @include css3(transform-origin, 100% 0);
            @include css3(transform, scale3d(.5, 1, 1));
        }
        @else if $direction==bottom {
            bottom: 0;
            left: 0;
            width: 100%;
            height: 1px;
            background-color: $color;
            @include css3(transform-origin, 0 100%);
            @include css3(transform, scale3d(1, .5, 1));
        }
        @else if $direction==left {
            top: 0;
            left: 0;
            width: 1px;
            height: 100%;
            background-color: $color;
            @include css3(transform-origin, 0 0);
            @include css3(transform, scale3d(.5, 1, 1));
        }
        @else if $direction==all {
            top: 0;
            left: 0;
            box-sizing: border-box;
            width: 200%;
            height: 200%;
            border: 1px solid $color;
            @include css3(transform-origin, 0 0);
            @include css3(transform, (scale(.5)));
        }
    }
}

// border-radius
// 必须结合border的mixin来使用，否则无效
//-----------------------------------------------------
@mixin border-radius($radius: $border-radius-base) {
    border-radius: $radius;
    &::after {
        border-radius: $radius * 2;
    }
}

// text-overflow
//-----------------------------------------------------
@mixin text-overflow {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

%text-overflow {
    @include text-overflow;
}

// text-hide
//-----------------------------------------------------
@mixin text-hide {
    font-size: 0;
    line-height: 0;
    overflow: hidden;
}

%text-hide {
    @include text-hide;
}

// text-break
//-----------------------------------------------------
@mixin text-break {
    word-break: break-all;
    word-wrap: break-word;
}

%text-break {
    @include text-break;
}

// text-clamp
//-----------------------------------------------------
@mixin text-clamp($clamp: 2) {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $clamp;
    text-overflow: ellipsis;
    overflow: hidden;
}

// flex
//-----------------------------------------------------
@mixin flex {
    display: -webkit-box;
    display: box;
    display: -webkit-flex;
    display: flex;
}

@mixin flex-direction($direction) {
    @if $direction==row {
        @include css3(box-orient, horizontal);
        @include css3(flex-direction, row);
    }
    @else if $direction==column {
        @include css3(box-orient, vertical);
        @include css3(flex-direction, column);
    }
    @else if $direction==row-reverse {
        @include css3(box-orient, horizontal);
        @include css3(box-direction, reverse);
        @include css3(flex-direction, row-reverse);
    }
    @else if $direction==column-reverse {
        @include css3(box-orient, vertical);
        @include css3(box-direction, reverse);
        @include css3(flex-direction, column-reverse);
    }
}

@mixin flex-wrap($wrap) {
    @if $wrap==nowrap {
        @include css3(box-lines, single);
        @include css3(flex-wrap, nowrap);
    }
    @else if $wrap==wrap {
        @include css3(box-lines, multiple);
        @include css3(flex-wrap, wrap);
    }
    @else if $wrap==wrap-reverse {
        @include css3(flex-wrap, wrap-reverse);
    }
}

@mixin flex-justify($justify) {
    @if $justify==start {
        @include css3(box-pack, start);
        @include css3(justify-content, flex-start);
    }
    @else if $justify==end {
        @include css3(box-pack, end);
        @include css3(justify-content, flex-end);
    }
    @else if $justify==center {
        @include css3(box-pack, center);
        @include css3(justify-content, center);
    }
    @else if $justify==between {
        @include css3(box-pack, justify);
        @include css3(justify-content, space-between);
    }
    @else if $justify==around {
        @include css3(justify-content, space-around);
    }
}

@mixin flex-align($align: stretch) {
    @if $align==start {
        @include css3(box-align, start);
        @include css3(align-items, flex-start);
    }
    @else if $align==end {
        @include css3(box-align, end);
        @include css3(align-items, flex-end);
    }
    @else if $align==center {
        @include css3(box-align, center);
        @include css3(align-items, center);
    }
    @else if $align==stretch {
        @include css3(box-align, stretch);
        @include css3(align-items, stretch);
    }
    @else if $align==baseline {
        @include css3(box-align, baseline);
        @include css3(align-items, baseline);
    }
}

@mixin flex-item($flex: 1) {
    @if $flex==0 {
        @include css3(box-flex, 0);
        @include css3(flex, none);
    }
    @else {
        @include css3(box-flex, $flex);
        @include css3(flex, $flex);
    }
}

@mixin flex-order($order: 0) {
    @include css3(box-ordinal-group, ($order + 1));
    @include css3(order, $order);
}

@mixin flex-align-self($align: auto) {
    @if $align==auto {
        @include css3(align-self, auto);
    }
    @else if $align==start {
        @include css3(align-self, flex-start);
    }
    @else if $align==end {
        @include css3(align-self, flex-end);
    }
    @else if $align==center {
        @include css3(align-self, center);
    }
    @else if $align==stretch {
        @include css3(align-self, stretch);
    }
    @else if $align==baseline {
        @include css3(align-self, baseline);
    }
}

// keyframes
// @include keyframes(动画名称){...}
// @include keyframes(move-the-object) {
//     0% {
//         transform: translateX(0);
//     }
//     100% {
//         transform: translateX(200px);
//     }
// }
//-----------------------------------------------------
@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

// media query
// @include mq-max-dw {
//     font-size: 12px;
// }
//-----------------------------------------------------
@mixin mq-min-dw($value: 320px) {
    @media only screen and (min-device-width: $value) {
        @content;
    }
}

@mixin mq-max-dw($value: 320px) {
    @media only screen and (max-device-width: $value) {
        @content;
    }
}

@mixin mq-mm-dw($value1: 320px, $value2: 480px) {
    @media only screen and (min-device-width: $value1) and (max-device-width: $value2) {
        @content;
    }
}

@mixin mq-min-dh($value: 320px) {
    @media only screen and (min-device-height: $value) {
        @content;
    }
}

@mixin mq-max-dh($value: 320px) {
    @media only screen and (max-device-height: $value) {
        @content;
    }
}

@mixin mq-mm-dh($value1: 320px, $value2: 480px) {
    @media only screen and (min-device-height: $value1) and (max-device-height: $value2) {
        @content;
    }
}

@mixin mq-ls {
    @media only screen and (orientation: landscape) {
        @content;
    }
}

@mixin mq-dpr($dpr: 1) {
    @media only screen and (-webkit-min-device-pixel-ratio: $dpr) {
        @content;
    }
}

// px2rem
// .class {
//     font-size: px2rem(12px);
// }
//-----------------------------------------------------
@function px2rem($px) {
    $rem: 37.5px; //375 / 10
    @return ($px / $rem)+rem;
}